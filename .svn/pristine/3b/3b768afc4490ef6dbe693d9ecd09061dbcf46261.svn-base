package cn.ucai.server.net;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.net.ServerSocket;
import java.net.Socket;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import cn.ucai.dto.RequestAction;
import cn.ucai.dto.RequestMsg;
import cn.ucai.dto.ResponseMsg;
import cn.ucai.server.action.ActionFactory;

import cn.ucai.util.ConfigUtil;

import javax.swing.JButton;
import java.awt.Font;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class ServerMonitorFrame extends JFrame {

	private JPanel contentPane;
	public static int SERVER_PORT = 0;
	private static boolean isRun = true;
	private static ServerSocket ss = null;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ServerMonitorFrame frame = new ServerMonitorFrame();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public ServerMonitorFrame() {
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JButton btnNewButton = new JButton("开启服务");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ServerMonitorFrame sm = new ServerMonitorFrame();
				sm.startServer();
			}
		});
		btnNewButton.setFont(new Font("宋体", Font.BOLD, 30));
		btnNewButton.setBounds(101, 51, 188, 53);
		contentPane.add(btnNewButton);
		
		JButton btnNewButton_1 = new JButton("停止服务");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ServerMonitorFrame sm = new ServerMonitorFrame();
				sm.stopServer();
			}
		});
		btnNewButton_1.setFont(new Font("宋体", Font.BOLD, 30));
		btnNewButton_1.setBounds(101, 139, 188, 53);
		contentPane.add(btnNewButton_1);
	}




/**
 * 开启服务器 如果端口占用，会换一个端口开启
 */
public void startServer() {
	try {
		if (SERVER_PORT == 0) {
			ConfigUtil config = new ConfigUtil("server.properties");
			SERVER_PORT = Integer.valueOf(config.getValue("server.port"));
		}
		ss = new ServerSocket(SERVER_PORT);
		System.out.println("服务器已启动，监听在" + SERVER_PORT + "端口");
		while (isRun) {

			while (isRun) {
				Socket s = ss.accept();
				System.out.println(s.getInetAddress().getHostAddress());
				new ServerThread(s).start();
			}

		}

	} catch (NumberFormatException e) {

		e.printStackTrace();
	} catch (IOException e) {
		SERVER_PORT++;
		startServer();
	}
}

/**
 * 停止服务
 */
public void stopServer() {
	isRun = false;
}

/**
 * 接收或响应客户端请求的线程
 * 
 * @author Administrator
 *
 */
public class ServerThread extends Thread {
	Socket socket;

	public ServerThread(Socket socket) {
		this.socket = socket;
	}

	@Override
	public void run() {
		ObjectInputStream ois = null;
		ObjectOutputStream oos = null;

		try {
			ois = new ObjectInputStream(socket.getInputStream());
			oos = new ObjectOutputStream(socket.getOutputStream());

			// 获取客户端发来的RequestMsg对象
			while (isRun) {
				RequestMsg requestMsg = (RequestMsg) ois.readObject();
				// 怎么杨解析RequestMsg
				if(requestMsg.getAction()==RequestAction.CLOSE_CLIENT){
					break;
				}
				requestMsg.setClient_ip(socket.getInetAddress().getHostName());
				ResponseMsg responseMsg = ActionFactory.getAction(requestMsg).disposeRequest(requestMsg);

				// 把响应对象返回给客户端

				oos.writeObject(responseMsg);
				oos.flush();
			}
		} catch (ClassNotFoundException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		} finally {
			try {
				ois.close();
				oos.close();
				socket.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}

}

